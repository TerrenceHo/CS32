 1)
 a)                             50

                         20            60

                   10         40            70

                      15    30            65     80
                           25  35             75
    

b)  In-Order: 10,15,20,25,30,35,40,50,60,65,70,75,80
    Pre-Order: 50,20,10,15,40,30,25,35,60,70,65,80,75
    Post-Order: 15,10,25,35,30,40,20,65,75,80,70,60,50

c)after deleting 30)             50

                         20            60

                   10          40           70

                      15    25            65     80
                              35              75


after deleting 20               50

                          15         60

                   10          40           70

                            25            65     80
                              35               75

2) a)
Node {
    Constructor
    Node * parent;
    Node * lhs;
    Node * rhs;
    int data;
}

b) 
void insert(Node * curr, int value,){
    insertHelper(curr, value, nullptr) //Call the recursive insert
}

void insertHelper(Node * curr, int value, Node * parent){
    if curr == nullptr 
        create a new node here with value, and set its parent equal to parent
    else if value < curr.data 
        call insertHelper with parameters curr.lhs, value, curr
    else if value > curr.data 
        call insertHelper with parameters curr.rhs, value, curr
}

3)a)                            8

                         3              6

                   0         2      4       

                      


b) Array = {8, 3, 6, 0 , 2, 4} count = 6

c)                              6

                         3              4

                   0         2            




4)
a)O(C+S)
b)O(log(C) + S)
c)O(log(C) + log(S))
d)O(log(S))
e)O(1)
f)O(log(C) + S)
g)O(Slog(S))
h)O(C * log(S))






